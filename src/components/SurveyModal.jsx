import { useEffect, useState } from "react";
import api from "../api";

export default function SurveyModal({ isOpen, onClose, token }) {
  const [rating, setRating] = useState(0);
  const [hoverRating, setHoverRating] = useState(0);
  const [happyIfClosed, setHappyIfClosed] = useState(null);
  const [suggestion, setSuggestion] = useState("");
  const [submitting, setSubmitting] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [error, setError] = useState("");
  const [avgRating, setAvgRating] = useState(null);
  const [total, setTotal] = useState(0);
  const [alreadySubmitted, setAlreadySubmitted] = useState(false);

  useEffect(() => {
    if (isOpen && token) {
      api
        .get("/api/survey/summary", {
          headers: { Authorization: `Bearer ${token}` },
        })
        .then((res) => {
          setAvgRating(res.data.avgRating);
          setTotal(res.data.total);
          // Check if user already submitted (by username in suggestions)
          if (
            res.data.suggestions &&
            res.data.suggestions.some((s) => s.user)
          ) {
            // This is a soft check; backend will enforce
          }
        });
      // Check if user already submitted (by trying to POST and catching 409)
      api
        .get("/api/survey/summary", {
          headers: { Authorization: `Bearer ${token}` },
        })
        .then((res) => {
          // If the user's username is in the survey list, they've taken it
          // This is a soft check; backend will enforce
        });
    }
  }, [isOpen, token]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    if (!rating || happyIfClosed === null) {
      setError("‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶ñ‡ßÅ‡¶∂‡¶ø/‡¶®‡¶æ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®");
      return;
    }
    setSubmitting(true);
    try {
      await api.post(
        "/api/survey",
        { rating, happyIfClosed, suggestion },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      setSubmitted(true);
    } catch (err) {
      if (err.response && err.response.status === 409) {
        setAlreadySubmitted(true);
        setError("‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶´‡¶ø‡¶°‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶¶‡¶ø‡ßü‡ßã‡¶õ‡ßã‡•§");
      } else {
        setError("‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá");
      }
    } finally {
      setSubmitting(false);
    }
  };

  if (!isOpen) return null;
  if (!token) return null;

  return (
    <div className="modal-overlay animate-fade-in z-50">
      <div className="modal-content p-6 max-w-md mx-4 animate-bounce-in relative">
        <button
          onClick={onClose}
          className="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-2xl font-bold w-8 h-8 flex items-center justify-center rounded-full hover:bg-gray-100 transition-colors"
          aria-label="Close survey modal"
        >
          √ó
        </button>
        <h2 className="text-2xl font-bold text-center mb-4 text-indigo-700">
          üìù ‡¶´‡¶ø‡¶°‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï / Survey
        </h2>
        {avgRating !== null && (
          <div className="text-center mb-2 text-sm text-gray-600">
            ‡¶ó‡ßú ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç:{" "}
            <span className="font-bold text-yellow-600">{avgRating} / 5</span> (
            {total} ‡¶ú‡¶®)
          </div>
        )}
        {alreadySubmitted ? (
          <div className="text-center text-green-700 font-bold text-lg py-8">
            ‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶´‡¶ø‡¶°‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§
          </div>
        ) : submitted ? (
          <div className="text-center text-green-700 font-bold text-lg py-8">
            ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
          </div>
        ) : (
          <form onSubmit={handleSubmit} className="space-y-5">
            <div>
              <label className="block mb-2 font-semibold">
                ‡ßß‡•§ ‡¶è‡¶á ‡¶è‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶∏‡¶®‡ßç‡¶§‡¶∑‡ßç‡¶ü?
              </label>
              <div className="flex items-center justify-center gap-1 mb-1">
                {[1, 2, 3, 4, 5].map((star) => (
                  <button
                    type="button"
                    key={star}
                    onClick={() => setRating(star)}
                    onMouseEnter={() => setHoverRating(star)}
                    onMouseLeave={() => setHoverRating(0)}
                    className="focus:outline-none"
                  >
                    <span
                      className={`text-3xl ${
                        star <= (hoverRating || rating)
                          ? "text-yellow-400"
                          : "text-gray-300"
                      }`}
                    >
                      ‚òÖ
                    </span>
                  </button>
                ))}
              </div>
              <div className="text-xs text-gray-500 text-center">
                {rating ? `‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç: ${rating}/5` : ""}
              </div>
            </div>
            <div>
              <label className="block mb-2 font-semibold">
                ‡ß®‡•§ ‡¶≠‡¶∞‡ßç‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø‡¶∞ ‡¶è‡¶á App ‡¶ü‡¶ø ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶≤‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá-
              </label>
              <div className="flex gap-4 justify-center">
                <label className="flex items-center gap-1 cursor-pointer">
                  <input
                    type="radio"
                    name="happyIfClosed"
                    value="true"
                    checked={happyIfClosed === true}
                    onChange={() => setHappyIfClosed(true)}
                  />
                  <span>‡¶ñ‡ßÅ‡¶∂‡¶ø ‡¶π‡¶¨</span>
                </label>
                <label className="flex items-center gap-1 cursor-pointer">
                  <input
                    type="radio"
                    name="happyIfClosed"
                    value="false"
                    checked={happyIfClosed === false}
                    onChange={() => setHappyIfClosed(false)}
                  />
                  <span>‡¶ñ‡ßÅ‡¶∂‡¶ø ‡¶π‡¶¨ ‡¶®‡¶æ</span>
                </label>
              </div>
            </div>
            <div>
              <label className="block mb-2 font-semibold">
                ‡ß©‡•§ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá, App ‡¶®‡¶ø‡ßü‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶™‡¶æ‡¶á‡¶≤‡ßá ‡¶®‡¶ø‡¶ö‡ßá ‡¶≤‡¶ø‡¶ñ‡ßã
              </label>
              <textarea
                className="w-full border border-gray-300 rounded-lg p-2 min-h-[60px]"
                value={suggestion}
                onChange={(e) => setSuggestion(e.target.value)}
                placeholder="‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ ‡¶≤‡¶ø‡¶ñ..."
                maxLength={300}
              />
              <div className="text-xs text-gray-400 text-right">
                {suggestion.length}/300
              </div>
            </div>
            {error && (
              <div className="text-red-600 text-center text-sm">{error}</div>
            )}
            <button
              type="submit"
              className="btn btn-primary w-full text-base font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
              disabled={submitting}
            >
              {submitting ? "‡¶ú‡¶Æ‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..." : "‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶æ‡¶ì"}
            </button>
          </form>
        )}
      </div>
    </div>
  );
}
